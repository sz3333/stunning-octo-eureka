# meta developer: neko_mochi
from .. import loader, utils
from telethon.tl.functions.messages import GetDialogFiltersRequest
from telethon.tl.types import DialogFilter
import logging

logger = logging.getLogger(__name__)

class FoldersInfoMod(loader.Module):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ—É –æ –ø–∞–ø–∫–∞—Ö (—á–∞—Ç-—Ñ–∏–ª—å—Ç—Ä–∞—Ö)"""
    strings = {
        "name": "FoldersInfo",
        "no_filters": "üòø –£ —Ç–µ–±—è –Ω–µ—Ç –ø–∞–ø–æ–∫!",
        "filter_info": "üìÇ <b>{title}</b> (ID: <code>{fid}</code>)\nüò∫ –≠–º–æ–¥–∑–∏: {emoji}\nüìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ: {pinned}\n‚ûï –í–∫–ª—é—á–µ–Ω–æ: {included}\n‚ûñ –ò—Å–∫–ª—é—á–µ–Ω–æ: {excluded}\n",
        "filter_peers": "üìÅ –ü–∞–ø–∫–∞ <b>{title}</b> (ID: <code>{fid}</code>) ‚Äî —Å–ø–∏—Å–æ–∫ peer'–æ–≤:\n\n<b>–ó–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ:</b>\n{pinned}\n\n<b>–í–∫–ª—é—á–µ–Ω–æ:</b>\n{included}\n\n<b>–ò—Å–∫–ª—é—á–µ–Ω–æ:</b>\n{excluded}",
        "need_id": "–£–∫–∞–∂–∏ ID –ø–∞–ø–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>.folder 1</code>",
        "bad_id": "–ù–µ–≤–µ—Ä–Ω—ã–π ID: <code>{arg}</code>",
        "not_found": "–ü–∞–ø–∫–∞ —Å ID <code>{fid}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    }

    async def folderscmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞–ø–æ–∫"""
        await utils.answer(message, "<b>–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–∞–ø–∫–∏...</b>")
        filters = await self.client(GetDialogFiltersRequest())
        if not filters:
            return await utils.answer(message, self.strings["no_filters"])

        out = ""
        for f in filters:
            if isinstance(f, DialogFilter):
                out += self.strings["filter_info"].format(
                    title=f.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                    fid=f.id,
                    emoji=getattr(f, "emoticon", "‚Äî") or "‚Äî",
                    pinned=len(getattr(f, "pinned_peers", []) or []),
                    included=len(getattr(f, "include_peers", []) or []),
                    excluded=len(getattr(f, "exclude_peers", []) or []),
                )
                out += "\n"
        await utils.answer(message, out)

    async def foldercmd(self, message):
        """.folder <id> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—ã—Ä—ã–µ peer'—ã –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ (pinned/include/exclude)"""
        arg = utils.get_args_raw(message)
        if not arg:
            return await utils.answer(message, self.strings["need_id"])
        try:
            fid = int(arg.strip())
        except Exception:
            return await utils.answer(message, self.strings["bad_id"].format(arg=arg))

        filters = await self.client(GetDialogFiltersRequest())
        target = None
        for f in filters:
            if isinstance(f, DialogFilter) and getattr(f, "id", None) == fid:
                target = f
                break

        if not target:
            return await utils.answer(message, self.strings["not_found"].format(fid=fid))

        # –ü–æ–∫–∞–∂–µ–º "—Å—ã—Ä—ã–µ" –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è peer-–æ–≤ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        pinned = "\n".join([repr(x) for x in (getattr(target, "pinned_peers", []) or [])]) or "‚Äî –ø—É—Å—Ç–æ"
        included = "\n".join([repr(x) for x in (getattr(target, "include_peers", []) or [])]) or "‚Äî –ø—É—Å—Ç–æ"
        excluded = "\n".join([repr(x) for x in (getattr(target, "exclude_peers", []) or [])]) or "‚Äî –ø—É—Å—Ç–æ"

        await utils.answer(message, self.strings["filter_peers"].format(
            title=target.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
            fid=fid,
            pinned=pinned,
            included=included,
            excluded=excluded
        ))