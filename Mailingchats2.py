# meta developer: @LidF1x
# meta name: UniversalMailing
# meta desc: |
#   üìÇ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ø–∞–ø–∫–∞–º Telegram
#   üîπ –î–æ–±–∞–≤–ª—è–π –ø–∞–ø–∫–∏ –ø–æ ID
#   üîπ –†–∞—Å—Å—ã–ª–∫–∞ –≤–æ –≤—Å–µ –≤–∫–ª—é—á—ë–Ω–Ω—ã–µ —á–∞—Ç—ã
#   üîπ –°–µ–π—Ñ-—Ä–µ–∂–∏–º, –ª–∏–º–∏—Ç—ã –∏ –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç –±–∞–Ω–∞

from .. import loader, utils
import asyncio, time, random, logging
from telethon.tl.functions.messages import GetDialogFiltersRequest
from telethon.tl.types import DialogFilter, Peer

logger = logging.getLogger(__name__)

@loader.tds
class UniversalMailingMod(loader.Module):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ø–∞–ø–∫–∞–º Telegram"""
    
    strings = {
        "name": "UniversalMailing",
        "loading": "üìÇ UniversalMailing –∑–∞–≥—Ä—É–∂–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .msgo <–≤—Ä–µ–º—è> <–∏–Ω—Ç–µ—Ä–≤–∞–ª> <—Ç–µ–∫—Å—Ç>",
        "start": "üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ {} —á–∞—Ç–æ–≤ | –ò–Ω—Ç–µ—Ä–≤–∞–ª: {} —Å–µ–∫",
        "stop": "üõë –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "done": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ | –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {}",
        "args_error": "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .msgo <–≤—Ä–µ–º—è> <–∏–Ω—Ç–µ—Ä–≤–∞–ª> <—Ç–µ–∫—Å—Ç>",
        "num_error": "‚ùå –í—Ä–µ–º—è –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏",
        "no_chats": "‚ùå –ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –î–æ–±–∞–≤—å—Ç–µ –ø–∞–ø–∫–∏ —Å —á–∞—Ç–∞–º–∏",
        "folder_added": "‚úÖ –ü–∞–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {}",
        "folder_exists": "‚ö†Ô∏è –ü–∞–ø–∫–∞ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ",
        "folder_removed": "‚úÖ –ü–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {}",
        "folder_not_found": "‚ö†Ô∏è –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
        "folders_list": "üìã –ü–∞–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {}",
        "stats": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {}\n–û—à–∏–±–æ–∫: {}\n–õ–∏–º–∏—Ç: {}/—á–∞—Å",
        "protection": "üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç –±–∞–Ω–∞: {}",
        "protection_on": "–í–ö–õ–Æ–ß–ï–ù–ê",
        "protection_off": "–í–´–ö–õ–Æ–ß–ï–ù–ê"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "ms_folders",
                [],
                lambda: "–°–ø–∏—Å–æ–∫ ID –ø–∞–ø–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
                validator=loader.validators.Series(
                    validator=loader.validators.Integer()
                )
            ),
            loader.ConfigValue(
                "ms_protection",
                True,
                lambda: "–ó–∞—â–∏—Ç–∞ –æ—Ç –±–∞–Ω–∞",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "ms_limit",
                180,
                lambda: "–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å",
                validator=loader.validators.Integer(minimum=50, maximum=500)
            )
        )
        self.active = False
        self.sent = 0
        self.errors = 0
        self.last_send = 0
        self.hourly_count = 0
        self.last_hour = time.time()

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        await self.client.send_message("me", self.strings["loading"])

    async def _get_chats_from_folders(self):
        """–ë–µ—Ä—ë–º –≤—Å–µ –≤–∫–ª—é—á—ë–Ω–Ω—ã–µ —á–∞—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫"""
        res = await self.client(GetDialogFiltersRequest())
        chats = []
        for f in res.filters:
            if not isinstance(f, DialogFilter):
                continue
            if f.id in self.config["ms_folders"]:
                peers = (f.pinned_peers or []) + (f.include_peers or [])
                for p in peers:
                    if isinstance(p, Peer):
                        chats.append(p)
        return list(set(chats))

    @loader.command()
    async def msgo(self, message):
        """–ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏: .msgo <–≤—Ä–µ–º—è> <–∏–Ω—Ç–µ—Ä–≤–∞–ª> <—Ç–µ–∫—Å—Ç>"""
        if self.active:
            await utils.answer(message, "‚ùó –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞")
            return

        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["args_error"])
            return

        try:
            args = args.split(" ", 2)
            duration = int(args[0])
            interval = max(int(args[1]), 5)
            text = args[2]
        except:
            await utils.answer(message, self.strings["num_error"])
            return

        chats = await self._get_chats_from_folders()
        if not chats:
            await utils.answer(message, self.strings["no_chats"])
            return

        self.active = True
        self.sent = 0
        self.errors = 0

        await utils.answer(message, self.strings["start"].format(len(chats), interval))

        end_time = time.time() + duration
        while self.active and time.time() < end_time:
            await self._send_to_chats(chats, text)
            if self.active and time.time() < end_time:
                await asyncio.sleep(interval)

        if self.active:
            await utils.answer(message, self.strings["done"].format(self.sent))
        self.active = False

    @loader.command()
    async def msstop(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        self.active = False
        await utils.answer(message, self.strings["stop"])

    @loader.command()
    async def msfadd(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É: .msfadd <id>"""
        try:
            folder_id = int(utils.get_args_raw(message))
        except:
            await utils.answer(message, "‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ ID –ø–∞–ø–∫–∏ —á–∏—Å–ª–æ–º")
            return
        if folder_id in self.config["ms_folders"]:
            await utils.answer(message, self.strings["folder_exists"])
            return
        self.config["ms_folders"].append(folder_id)
        await utils.answer(message, self.strings["folder_added"].format(folder_id))

    @loader.command()
    async def msfdel(self, message):
        """–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É: .msfdel <id>"""
        try:
            folder_id = int(utils.get_args_raw(message))
        except:
            await utils.answer(message, "‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ ID –ø–∞–ø–∫–∏ —á–∏—Å–ª–æ–º")
            return
        if folder_id not in self.config["ms_folders"]:
            await utils.answer(message, self.strings["folder_not_found"])
            return
        self.config["ms_folders"].remove(folder_id)
        await utils.answer(message, self.strings["folder_removed"].format(folder_id))

    @loader.command()
    async def msflist(self, message):
        """–°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫"""
        if not self.config["ms_folders"]:
            await utils.answer(message, "‚ÑπÔ∏è –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫")
            return
        await utils.answer(message, self.strings["folders_list"].format(
            ", ".join(str(f) for f in self.config["ms_folders"])
        ))

    @loader.command()
    async def msstats(self, message):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        status = self.strings["protection_on"] if self.config["ms_protection"] else self.strings["protection_off"]
        stats = self.strings["stats"].format(self.sent, self.errors, self.hourly_count)
        await utils.answer(message, stats + "\n" + self.strings["protection"].format(status))

    @loader.command()
    async def msmode(self, message):
        """–†–µ–∂–∏–º –∑–∞—â–∏—Ç—ã"""
        self.config["ms_protection"] = not self.config["ms_protection"]
        status = self.strings["protection_on"] if self.config["ms_protection"] else self.strings["protection_off"]
        await utils.answer(message, self.strings["protection"].format(status))

    async def _send_to_chats(self, chats, text):
        self._check_limits()
        for peer in chats:
            if not self.active:
                break
            await self._safe_send(peer, text)

    async def _safe_send(self, peer, text):
        try:
            if self.config["ms_protection"]:
                delay = random.uniform(2.5, 6.0)
                if time.time() - self.last_send < 10:
                    delay += random.uniform(1.0, 3.0)
                await asyncio.sleep(delay)
            await self.client.send_message(peer, text)
            self.sent += 1
            self.hourly_count += 1
            self.last_send = time.time()
        except Exception as e:
            self.errors += 1
            if "Too Many Requests" in str(e) and self.config["ms_protection"]:
                wait = random.randint(45, 180)
                await asyncio.sleep(wait)
                return await self._safe_send(peer, text)

    def _check_limits(self):
        now = time.time()
        if now - self.last_hour > 3600:
            self.hourly_count = 0
            self.last_hour = now

    async def on_unload(self):
        self.active = False